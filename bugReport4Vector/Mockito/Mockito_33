ArgumentCaptor.fromClass's return type should match a parameterized type
ArgumentCaptor.fromClass's return type should match a parameterized type. I.e. the expression ArgumentCaptor.fromClass(Class<S>) should be of type ArgumentCaptor<U> where S is a subtype of U.
For example:
ArgumentCaptor<Consumer<String>> captor = ArgumentCaptor.fromClass(Consumer.class)
does not type check (i.e. it is a compile time error). It should type check.
The reasons that it is desirable for ArgumentCaptor.fromClass to allow expressions such as the example above to type check are:
ArgumentCaptor.fromClass is intended to be a convenience method to allow the user to construct an ArgumentCaptor without casting the returned value.
Currently, the user can devise a workaround such as:
ArgumentCaptor<? extends Consumer<String>> captor 
= ArgumentCaptor.fromClass(Consumer.class)
This workaround is inconvenient, and so contrary to ArgumentCaptor.fromClass being a convenience method.
It is inconsistent with @Captor, which can be applied to a field with a paramterized type. I.e.
@Captor ArgumentCaptor<Consumer<String>> captor 
type checks.