WrongTypeOfReturnValue when abstract class have two abstract method
Hey
I found a strange problem, when i create a abstract class:
abstract class AbstractClass {
    abstract protected Long lol();
    abstract protected String wow();
    public String give() {
        wow();
        lol();
        return "give";
    }
}
and i have another class extends abstract Class:
public class ClassExtendsAbstractClass extends AbstractClass {
@Override
 protected Long lol() {
        return 2L;
    }
    @Override
    protected String wow() {
        return "WOW";
    }
}
and I have class:
public class A {
  private ClassExtendsAbstractClass classExtendsAbstractClass;
  public A(ClassExtendsAbstractClass classExtendsAbstractClass) {
    this.classExtendsAbstractClass = classExtendsAbstractClass;
  }
  public String doSomeThing(){
    return classExtendsAbstractClass.wow();
  }
}
and when i try mock method doSomeThing() from A class in test:
  @Mock
  private ClassExtendsAbstractClass classExtendsAbstractClass;
  private A a;
  @Before
  public void before(){
    Mockito.when(classExtendsAbstractClass.give()).thenReturn("aaa");
  }
  @Test
  public void test() {
    a = new A(classExtendsAbstractClass);
  }
I get the error:
org.mockito.exceptions.misusing.WrongTypeOfReturnValue:
String cannot be returned by lol()
lol() should return Long
This is strange behavior, because the method lol() should not be called, but when I delete one abstract method everything is good.