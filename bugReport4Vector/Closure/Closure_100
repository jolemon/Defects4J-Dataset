Only assignment to "this" issues a "dangerous use of the global this object" warning.
What steps will reproduce the problem? 1. Compile this:  //////////////////////////////////////////  // ==ClosureCompiler==  // @compilation_level ADVANCED_OPTIMIZATIONS  // @output_file_name default.js  // ==/ClosureCompiler==    /** @constructor */  function Foo()  {      this._bar = null;  };    /** @this {Foo} */  function writeMethodWithAnnotation()  {     this._bar = 123; // no warning. ok  }    /** @this {Foo} */  function readMethodWithAnnotation()  {     return this._bar; // no warning. ok  }    //----    function writeMethodWithoutAnnotation()  {     this._bar = 123; // warning. ok.  }    function readMethodWithoutAnnotation()  {     return this._bar; // <- No warning!  }  //////////////////////////////////////////    What is the expected output? What do you see instead? - Should get two "dangerous use of the global this object" warnings in the   readMethodWithAnnotation and writeMethodWithoutAnnotation functions.  - Only writeMethodWithoutAnnotation warns.    What version of the product are you using? On what operating system? Both 20100330 and online compiler.    Please provide any additional information below. ref: http://code.google.com/closure/compiler/docs/js-for-compiler.html   "To prevent compiler warnings, you must use a @this annotation whenever   this appears in a function that is neither a prototype method nor a   function marked as a @constructor."    This also means the example code in the docs won't trig a warning.  -----  /**   * Returns the roster widget element.   * @this {Widget} <-- currently this doesn't matter   * @return {Element}   */  function() {    return this.getComponent().getElement();  });  ------    // Fredrik