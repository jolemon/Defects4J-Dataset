Use @public tag to prevent compression of symbol names
Given this input code:     Glow = {};   /** @public */ Glow.versions = [1,2,3];   Glow.showVersions = function() { alert(Glow.versions); }      // exports   window['Glow'] = Glow;   Glow['versions'] = Glow.versions;   Glow['showVersions'] = Glow.showVersions;    The compiler (with ADVANCED_OPTIMIZATIONS on) will produce the following  output code:     Glow = {};   Glow.a = [1, 2, 3];   Glow.b = function() { alert(Glow.a) };   window.Glow = Glow;   Glow.versions = Glow.a;   Glow.showVersions = Glow.b    From outside the Glow library, a user may do the following (in their own,  uncompressed code):     Glow.versions = [4,5,6];   Glow.showVersions();    Only in the compiled code will the user-code produces "1,2,3" instead of  the expected "4,5,6". This is because the compiler renamed the reference to  [1,2,3] in `showVersions()` to "Glow.a", whilst the user assigned a new  array to "Glow.versions", and therefore the two different names now refer  to two different arrays.    I can avoid this by using the stringy-name to refer to Glow["versions"],  but I would then have to do that everywhere in my code which is a annoying  and bug-prone (if I or someone else should ever forget). I'd prefer to tell  the compiler once about my wish to have a property name left uncompresed,  rather than relying on a side effect (the fact that the compiler won't  compress stringy-named properties) and then having to invoke that  side-effect consistently everywhere.    Instead I'm requesting that when the compiler sees a property is marked by  the author as @public it should then leave that name uncompressed everywhere.    So, given the input code above, the desired output would be:     Glow = {};   Glow.versions = [1, 2, 3];   Glow.b = function() { alert(Glow.versions) };   window.Glow = Glow;   Glow.versions = Glow.versions; // not needed now   Glow.showVersions = Glow.b    I'm not fixed on a particular tag, but @public seems an obvious choice, and  I'd prefer to use tags that already exist in JsDoc Toolkit.    Note that my proposed feature is different than the `@export Glow.versions`  tag proposal, as that tag would merely be a shortcut for "Glow['versions']  = Glow.versions;", which, as I've shown above, doesn't solve this problem.  