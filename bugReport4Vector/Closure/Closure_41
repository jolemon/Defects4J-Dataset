In ADVANCED mode, Compiler fails to warn about overridden methods with different signatures.
In ADVANCED mode, Compiler fails to warn about overridden methods with different signatures. The following code only warns in the one instance noted in the comment, whereas I would expect it to complain about the declarations of both Bar.prototype.add and Bar.prototype.sub, as they claim @inheritDoc, but have seemingly different signatures from that of their superclass methods.    It would be helpful to have such a warning so that when you change the signature of a superclass method, you can run the Compiler to trigger warnings and find all of the other signatures that you need to update.    Run the following:    // ==ClosureCompiler==  // @compilation_level ADVANCED_OPTIMIZATIONS  // @output_file_name default.js  // @use_closure_library true  // ==/ClosureCompiler==    goog.provide('Foo');  goog.provide('Bar');      /** @constructor */  Foo = function() {};      /**   * @param {number} a   * @param {number} b   * @return {number}   */  Foo.prototype.add = function(a, b) {    return a + b;  };      /**   * @param {number} a   * @param {number} b   * @return {number}   */  Foo.prototype.sub = goog.abstractMethod;      /**   * @constructor   * @extends {Foo}   */  Bar = function() {    goog.base(this);  };  goog.inherits(Bar, Foo);      /** @inheritDoc */  Bar.prototype.add = function(one) {    return one;  };      /** @inheritDoc */  Bar.prototype.sub = function(one) {    return one;  };      var foo = /** @type {Foo} */ (new Bar());  alert(foo.add(3, 4));    var bar = new Bar();  // THIS PRODUCES JSC_WRONG_ARGUMENT_COUNT  alert(bar.add(3, 4));  