Try/catch blocks incorporate code not inside original blocks
What steps will reproduce the problem?   Starting with this code:    -----  function a() {   var x = '1';   try {    x += somefunction();   } catch(e) {   }   x += "2";   try {    x += somefunction();   } catch(e) {   }   document.write(x);  }    a();  a();  -----    It gets compiled to:    -----  function b() {    var a;    try {      a = "1" + somefunction()    }catch(c) {    }    try {      a = a + "2" + somefunction()    }catch(d) {    }    document.write(a)  }  b();  b();  -----    What is the expected output? What do you see instead?   The problem is that it's including the constant "1" and "2" inside the try block when the shouldn't be. When executed uncompiled, the script prints "1212". When compiled, the script prints "undefinedundefined".    This behavior doesn't happen if the entire function gets inlined, or if the code between the two try blocks is sufficiently complex.      What version of the product are you using? On what operating system?   Closure Compiler (http://code.google.com/closure/compiler)  Version: 20120430 (revision 1918)  Built on: 2012/04/30 18:02  java version "1.6.0_33"  Java(TM) SE Runtime Environment (build 1.6.0_33-b03-424-11M3720)  Java HotSpot(TM) 64-Bit Server VM (build 20.8-b03-424, mixed mode)  